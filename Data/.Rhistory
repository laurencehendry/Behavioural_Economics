"AWS_SECRET_ACCESS_KEY" = "MFlp0ViuLOUfWlprlG2ZXYZSrVwP2unVzeeP6eGH",
"AWS_DEFAULT_REGION" = "eu-central-1")
# Save to S3 storage
test <- bucketlist()
christopherbucket <- aws.s3::getbucket(
bucket = 'christopherbucket'
)
christopherbucket[1]
christopherbucket[2]
christopherbucket <- aws.s3::getbucket(
bucket = 'christophersbucket'
)
aws.s3::s3load(bucket = 'christopherbucket',
object = "test.csv", opts = )
aws.s3::s3load(bucket = 'christopherbucket',
object = "test.csv")
?s3load()
?s3load
?asw.s3::s3load
?aws.s3::s3load
getbucket <- function(bucket,
prefix = NULL,
delimiter = NULL,
max = NULL,
marker = NULL,
parse_response = TRUE,
...){
query = list(prefix = prefix, delimiter = delimiter, "max-keys" = max, marker = marker)
r <- s3HTTP(verb = "GET", bucket = bucket, query = query, parse_response = parse_response, ...)
if (!parse_response){
out <- r
} else if (inherits(r, "aws_error")) {
out <- r
} else {
for (i in which(names(r) == "Contents")) {
attr(r[[i]], "class") <- "s3_object"
}
out <- structure(r, class = "s3_bucket")
}
out
}
print.s3_bucket <- function(x, ...){
cat("Bucket:", x$Name, "\n\n")
getbucket <- function(bucket,
prefix = NULL,
delimiter = NULL,
max = NULL,
marker = NULL,
parse_response = TRUE,
...){
query = list(prefix = prefix, delimiter = delimiter, "max-keys" = max, marker = marker)
r <- s3HTTP(verb = "GET", bucket = bucket, query = query, parse_response = parse_response, ...)
if (!parse_response){
out <- r
} else if (inherits(r, "aws_error")) {
out <- r
} else {
for (i in which(names(r) == "Contents")) {
attr(r[[i]], "class") <- "s3_object"
}
out <- structure(r, class = "s3_bucket")
}
out
}
print.s3_bucket <- function(x, ...){
cat("Bucket:", x$Name, "\n\n")
print(x[names(x) == "Contents"])
invisible(x)
}
getbucket <- function(bucket,
prefix = NULL,
delimiter = NULL,
max = NULL,
marker = NULL,
parse_response = TRUE,
...){
query = list(prefix = prefix, delimiter = delimiter, "max-keys" = max, marker = marker)
r <- s3HTTP(verb = "GET", bucket = bucket, query = query, parse_response = parse_response, ...)
if (!parse_response){
out <- r
} else if (inherits(r, "aws_error")) {
out <- r
} else {
for (i in which(names(r) == "Contents")) {
attr(r[[i]], "class") <- "s3_object"
}
out <- structure(r, class = "s3_bucket")
}
out
}
print.s3_bucket <- function(x, ...){
cat("Bucket:", x$Name, "\n\n")
print(x[names(x) == "Contents"])
invisible(x)
}
get_acl <- function(bucket, ...){
if (inherits(bucket, "s3bucket"))
bucket <- bucket$Name
r <- s3HTTP(verb = "GET",
bucket = bucket,
path = '/?acl',
headers = list(`x-amz-content-sha256` = ""),
...)
if (inherits(r, "aws_error")) {
return(r)
} else {
return(r)
}
}
getbucket <- function(bucket,
prefix = NULL,
delimiter = NULL,
max = NULL,
marker = NULL,
parse_response = TRUE,
...){
query = list(prefix = prefix, delimiter = delimiter, "max-keys" = max, marker = marker)
r <- s3HTTP(verb = "GET", bucket = bucket, query = query, parse_response = parse_response, ...)
if (!parse_response){
out <- r
} else if (inherits(r, "aws_error")) {
out <- r
} else {
for (i in which(names(r) == "Contents")) {
attr(r[[i]], "class") <- "s3_object"
}
out <- structure(r, class = "s3_bucket")
}
out
}
getbucket <- function(bucket,
prefix = NULL,
delimiter = NULL,
max = NULL,
marker = NULL,
parse_response = TRUE,
...){
query = list(prefix = prefix, delimiter = delimiter, "max-keys" = max, marker = marker)
r <- s3HTTP(verb = "GET", bucket = bucket, query = query, parse_response = parse_response, ...)
if (!parse_response){
out <- r
} else if (inherits(r, "aws_error")) {
out <- r
} else {
for (i in which(names(r) == "Contents")) {
attr(r[[i]], "class") <- "s3_object"
}
out <- structure(r, class = "s3_bucket")
}
out
}
?s3HTTP
??s3HTTP
library(aws.s3)
test <- bucketlist()
?s3HTTP
?getbucket
aws.s3::getbucket(bucket = "christopherbucket")
Sys.setenv("AWS_ACCESS_KEY_ID" = "AKIAJLLFA5MQ3PUZODOQ",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "eu-central-1")
aws.s3::getbucket(bucket = "christopherbucket")
aws.s3::getbucket(bucket = "christophersbucket")
test <-aws.s3::getbucket(bucket = "christophersbucket")
aws.s3::s3HTTP(verb = "GET", bucket = "christophersbucket")
?parse_url
library(RMySQL)
library(RMySQL)
database <- dbConnect("MySQL(christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com"), user = "christopher", password = "DimA*PdD320",
database <- dbConnect("MySQL(christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com"), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb")
database <- dbConnect(MySQL("christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com"), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb")
database <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
dbListTables(database)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
dbListTables(mydb)
dbWriteTable(mydb, name='table_name', value=data.frame.name)
train <- read.csv("~/Studium/Hertie School of Governance/Courses/Statistics/Data/Titanic Disaster Data (Kaggle)/train.csv")
View(train)
dbWriteTable(mydb, name='table_name', value="train.csv")
dbWriteTable(mydb, name='titanic-train', value="train")
dbWriteTable(mydb, name='titanic-train', value=train)
View(train)
dbListTables(mydb)
c <- c(1,2,3)
test <- data.frame(c)
dbWriteTable(mydb, name='titanic-train', value=test)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
dbListTables(mydb)
c <- c(1,2,3)
test <- data.frame(c)
dbWriteTable(mydb, name='titanic-train', value=test)
dbWriteTable(mydb, name="test", value=test)
dbListTables(mydb)
dbWriteTable(mydb, name="titanic", value=train)
dbListFields(mydb)
dbListTables(mydb)
dbListFields(mydb, "titanic")
data <- dbSendQuery(mydb, "Ticket * titanic")
data = fetch(data, n=-1)
data <- dbSendQuery(mydb, "SELECT Ticket FROM titanic")
data = fetch(data, n=-1)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
dbWriteTable(mydb, name="titanic", value=train)
dbListTables(mydb)
dbListFields(mydb, "titanic")
data <- dbSendQuery(mydb, "SELECT Ticket FROM titanic")
data <- fetch(data, n=-1)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
dbListTables(mydb)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "ChristopherAirbnb",
host = "christopherairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "AirbnbData",
host = "coslerairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
dbListTables(mydb)
data <- read.csv("C:/Users/Christopher/OneDrive/Dokumente/Studium/Hertie School of Governance/Master Thesis/Data/Inside AirBnB/Automatic/Newest listings/Listings big/listings_complete.csv")
dbWriteTable(mydb, name="Airbnb_all", value=data)
names(data)
data$Country<-NULL
dbWriteTable(mydb, name="Airbnb_all", value=data)
data$City<-NULL
dbWriteTable(mydb, name="Airbnb_all", value=data)
dbListTables(mydb)
dbListFields(mydb)
dbListTables(mydb)
?dbListFields
dbListFields(mydb, Airbnb_all)
dbListFields(mydb, "Airbnb_all")
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "AirbnbData",
host = "coslerairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
dbListTables(mydb)
dbListFields(mydb, "Airbnb_all")
data <- dbSendQuery(mydb, "SELECT description FROM Airbnb_all")
data <- fetch(data, n=-1)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "AirbnbData",
host = "coslerairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "AirbnbData",
host = "coslerairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "AirbnbData",
host = "coslerairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "AirbnbData",
host = "coslerairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
mydb <- dbConnect(MySQL(), user = "christopher", password = "DimA*PdD320",
dbname = "AirbnbData",
host = "coslerairbnb.c3l4ugl9q266.eu-central-1.rds.amazonaws.com",
port = 3306)
install.packages("devtools")
require(devtools)
install_github("RS3","Gastrograph")
install_github("Gastrograph/RS3")
mydb <- dbConnect(MySQL(), user = "root", password = "DimS*PdD320",
dbname = "mysql",
host = "root@localhost",
port = 3306)
library(RMySQL)
mydb <- dbConnect(MySQL(), user = "root", password = "DimS*PdD320",
dbname = "mysql",
host = "root@localhost",
port = 3306)
mydb <- dbConnect(MySQL(), user = "root", password = "DimS*PdD320",
dbname = "Local instance MySQL57",
host = "root@localhost",
port = 3306)
mydb <- dbConnect(MySQL(), user = "root", password = "DimS*PdD320",
dbname = "Local instance MySQL57",
host = "localhost",
port = 3306)
drv <- dbDriver("MySQL")
con <- dbConnect(drv, user="root", pass="myrootpass")
rs <- dbSendQuery(con, statement = "SHOW DATABASES;")
fetch(rs)
con <- dbConnect(drv, user="root", pass="DimS*PdD320")
rs <- dbSendQuery(con, statement = "SHOW DATABASES;")
fetch(rs)
con <- dbConnect(MySQL(), user="root", pass="DimS*PdD320")
rs <- dbSendQuery(con, statement = "SHOW DATABASES;")
fetch(rs)
con <- dbConnect(MySQL(), user="root", pass="DimS*PdD320")
rs <- dbSendQuery(con, statement = "SHOW DATABASES;")
fetch(rs)
# Airbnb data in SQL
library(RMySQL)
# Connect to local SQL
con <- dbConnect(MySQL(), user="root", pass="DimS*PdD320")
rs <- dbSendQuery(con, statement = "SHOW DATABASES;")
data <- read.csv("C:/Users/Christopher/OneDrive/Dokumente/Studium/Hertie School of Governance/Master Thesis/Data/Inside AirBnB/Automatic/Newest listings/Listings big/listings_complete.csv")
dbListTables(con)
con <- dbConnect(MySQL(), user="root", pass="DimS*PdD320")
dbListTables(con)
rs <- dbSendQuery(con, statement = "SHOW DATABASES;")
fetch(rs)
?dbListTables
dbListTables(con, "world")
test <- data[1:100]
dbWriteTable(con, "Airbnb_complete", data)
?dbConnect
con <- dbConnect(MySQL(), user="root", pass="DimS*PdD320", dbname = "world")
dbListTables(con)
con <- dbConnect(MySQL(), user="root", pass="DimS*PdD320", dbname = "airbnb")
dbListTables(con)
dbWriteTable(con, "Airbnb_complete", data)
data <- data$Country <- NULL
data$City <- NULL
test$Country <- NULL
test$City <- NULL
dbWriteTable(con, "Airbnb_complete", test)
dbListFields(con, "Airbnb_complete")
data <- dbSendQuery(con, "SELECT description FROM Airbnb_all")
data <- fetch(data, n=-1)
data <- dbSendQuery(con, "SELECT description FROM Airbnb_complete")
data <- fetch(data, n=-1)
dbRemoveTable(con, "Airbnb_complete")
con <- dbConnect(MySQL(), user="root", pass="DimS*PdD320", dbname = "airbnb")
dbRemoveTable(con, "Airbnb_complete")
dbListTables(con)
dbRemoveTable(con, "Airbnb_complete")
?dbRemoveTable
dbRemoveTable(con, "Airbnb_complete")
dbListTables(con)
dbRemoveTable(con, "Airbnb_complete")
dbListFields(con, "Airbnb_complete")
dbRemoveTable(con, "Airbnb_complete")
dbRemoveTable(conn = con, name = "Airbnb_complete")
dbRemoveTable(conn = con, name = "airbnb_complete")
dbListFields(con, "airbnb_complete")
dbListTables(con)
# Airbnb data in SQL
library(RMySQL)
# Connect to local SQL
con <- dbConnect(MySQL(), user="root", pass="DimS*PdD320", dbname = "airbnb")
# Import data that should be saved
data <- read.csv("C:/Users/Christopher/OneDrive/Dokumente/Studium/Hertie School of Governance/Master Thesis/Data/Inside AirBnB/Automatic/Newest listings/Listings big/listings_complete.csv")
data$Country <- NULL
data$City <- NULL
# List all tables in database
dbListTables(con)
# Write new database
dbWriteTable(con, "airbnb_complete", data)
# List all files in table
dbListFields(con, "airbnb_complete")
# Make a query
query <- dbSendQuery(con, "SELECT description FROM Airbnb_complete")
query <- fetch(data, n=-1)
# Remove a table
#dbRemoveTable(conn = con, name = "airbnb_complete")
query <- dbSendQuery(con, "SELECT description FROM Airbnb_complete")
dbListFields(con, "airbnb_complete")
con <- dbConnect(MySQL(), user="root", pass="DimS*PdD320", dbname = "airbnb")
dbListFields(con, "airbnb_complete")
query <- dbSendQuery(con, "SELECT description FROM Airbnb_complete")
query <- fetch(data, n=-1)
mu2 <- c(3, 3)
Y2  <- round(rmvnorm(Nj[2], mean=mu2, sigma=Sigma))
Y12 <- rbind(Y1, Y2)
IV  <- factor(rep(1:2, Nj))
install.packages("DescTools")
library(DescTools)
mu2 <- c(3, 3)
Y2  <- round(rmvnorm(Nj[2], mean=mu2, sigma=Sigma))
??rmvnorm
install.packages("mvtnorm")
library(mvtnorm)
mu2 <- c(3, 3)
Y2  <- round(rmvnorm(Nj[2], mean=mu2, sigma=Sigma))
Y12 <- rbind(Y1, Y2)
IV  <- factor(rep(1:2, Nj))
mu2 <- c(3, 3)
Y2  <- round(rmvnorm(Nj[2], mean=mu2, sigma=Sigma))
set.seed(123)
library(mvtnorm)
Nj    <- c(15, 25)
Sigma <- matrix(c(16,-2, -2,9), byrow=TRUE, ncol=2)
mu1   <- c(-4, 4)
Y1    <- round(rmvnorm(Nj[1], mean=mu1, sigma=Sigma))
mu2 <- c(3, 3)
Y2  <- round(rmvnorm(Nj[2], mean=mu2, sigma=Sigma))
Y12 <- rbind(Y1, Y2)
IV  <- factor(rep(1:2, Nj))
length(IV)
View(Y12)
View(Y12)
muH0 <- c(-1, 2)
library(DescTools)
HotellingsT2Test(Y1, mu=muH0)
View(Y1)
?HottelingsT2Test
?HotellingsT2Test
HotellingsT2Test(Y1)
############################
## Laurence Hendry
## R version used: RStudio 0.99.892
## Behavioural Economics with Prof. Traxler
############################
#NB.
#naming convention for shapes file is PLZ99 for PLZ with 0 in front, PLZ99_N with no 0 in front, and PLTZORT99 provides city names
#full firepower
library(doParallel)
cl <- makeCluster(4)
registerDoParallel(cl)
#Directory and taking correct columns from datasets
try(setwd("/Users/laurencehendry/GoogleDrive/MPP Hertie/2nd Year/Behavioral Economics & Experimental Policy Analysis/Groupwork/plz"),silent=TRUE)
try(setwd("C:/Users/Christopher/Google Drive/GitHub/Behavioural_Economics/Data"))
sub <- read.csv("Untitled spreadsheet - Sheet1.csv")
sub <- sub[c(1, 2, 3, 12, 20, 21)]
#renaming
names(sub)[1] <-'treatment.group'
names(sub)[2] <-'unique.ID'
names(sub)[3] <-'rent'
names(sub)[4] <-'PLZ'
names(sub)[5] <-'english.dummy'
names(sub)[6] <-'languages.dummy'
# Correcting PLZs
#http://www.r-bloggers.com/paste-paste0-and-sprintf/
sub$PLZ <- paste0("0",sub$PLZ)
#loading german PLZ maps
library(shapefiles)
shapefile <- read.shapefile('post_pl')
#dbf <- read.dbf("post_pl.dbf") # Delete, you do not need this row
#shx <- read.shx("post_pl.shx") # Delete, you do not need this row
##### Start Christopher Code
# I would however recommend loading it with readORG
library(rgdal)
Shapes <- readOGR(dsn = ".", layer = "post_pl") # Load Kreise shapefile
Shapes$random_number <- sample(1:10, size = 102, replace = TRUE)
Shapes$random_number <- sample(1:10, size = 8270, replace = TRUE)
sub$classes <- cut(Shapes$random_number,
seq(min(Shapes$random_number), max(Shapes$random_number), by = 2),
right = FALSE,
labels = c("1-3", "3-5", "5-8", "9-10")) # Cut these into 5 categories
Shapes$random_number <- sample(1:10, size = 8270, replace = TRUE)
Shapes$random_number
Shapes$random_number <- cut(Shapes$random_number,
seq(min(Shapes$random_number), max(Shapes$random_number), by = 2),
right = FALSE,
labels = c("1-3", "3-5", "5-8", "9-10")) # Cut these into 5 categories
Shapes$random_number
Shapes$random_number <- sample(1:10, size = 8270, replace = TRUE)
Shapes$random_number_cut <- cut(Shapes$random_number,
seq(min(Shapes$random_number), max(Shapes$random_number), by = 2),
right = FALSE,
labels = c("1-3", "3-5", "5-8", "9-10")) # Cut these into 5 categories
labels <- c("1-3", "3-5", "5-8", "9-10")
library(RColorBrewer)
colours <- brewer.pal(4,"Greys") # Pick color palette
plot(Shapes,border = "darkgrey", col = colours[Shapes$random_number_cut])
Shapes$random_number <- 10
Shapes$random_number_cut <- cut(Shapes$random_number,
seq(min(Shapes$random_number), max(Shapes$random_number), by = 2),
right = FALSE,
labels = c("1-3", "3-5", "5-8", "9-10")) # Cut these into 5 categories
Shapes$random_number <- "1-3"
plot(Shapes,border = "darkgrey", col = colours[Shapes$random_number_cut])
Shapes$random_number_cut <- "1-3"
plot(Shapes,border = "darkgrey", col = colours[Shapes$random_number_cut])
Shapes$random_number_cut
